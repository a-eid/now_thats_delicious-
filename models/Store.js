const mongoose = require("mongoose");
const slugs = require("slugs");
mongoose.Promise = global.Promise;

const storeSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      trim: true,
      required: "Please Enter a Store Name"
    },
    slug: String, // will be autogenerated
    description: {
      type: String,
      trim: true
    },
    tags: [String],
    created: {
      type: Date,
      default: Date.now()
    },
    location: {
      type: {
        type: String,
        default: "Point"
      },
      coordinates: [
        {
          type: Number,
          required: "You must supply coordinates!"
        }
      ],
      address: {
        type: String,
        required: "You must supply an address"
      }
    },
    photo: String,
    author: {
      type: mongoose.Schema.ObjectId,
      ref: "User", // what model is it referencing .
      required: "You must supply an author"
    }
  },
  {
    toJSON: { virtual: true },
    toObject: { virtual: true }
  }
);

// define our indexes
storeSchema.index({
  name: "text", // index it as text  to be searchable
  description: "text"
});

storeSchema.index({ location: "2dsphere" });

storeSchema.statics.getTagsList = function() {
  // here this is the Store it self , notice the statics
  return this.aggregate([
    { $unwind: "$tags" }, // duplicate document for every item in the array tags
    { $group: { _id: "$tags", count: { $sum: 1 } } },
    { $sort: { count: -1 } }
  ]);
};

storeSchema.statics.getTopStores = function() {
  return this.aggregate([
    // lookup stores and populate their values
    {
      $lookup: {
        from: "reviews",
        localField: "_id",
        foreignField: "store",
        as: "reviews"
      }
    }, // wtf (it kinda make sense now)
    // filter for stores that have more than 1 review
    { $match: { "reviews.1": { $exists: true } } },
    // add average review
    {
      $project: {
        photo: "$$ROOT.photo",
        name: "$$ROOT.name",
        reviews: "$$ROOT.reviews",
        slug: "$$ROOT.slug",
        averageRating: { $avg: "$reviews.rating" }
      }
    },
    // sort by average review
    { $sort: { averageRating: -1 } }, // highest to lowest
    // limit to 10
    { $limit: 10 }
  ]);
};

storeSchema.pre("save", async function(next) {
  if (this.isModified("name")) this.slug = slugs(this.name);
  const re = new RegExp(`^(${this.slug})((-[0-9]*$)?)$`, "i");
  const stores = (await this.constructor.find({ slug: re })) || [];
  if (stores.length > 0) this.slug = [this.slug, stores.length + 1].join("-");
  next();
});

storeSchema.virtual("reviews", {
  ref: "Review",
  localField: "_id",
  foreignField: "store"
});

function autopopulate(next) {
  this.populate("reviews");
  next();
}

storeSchema.pre("find", autopopulate);
storeSchema.pre("findOne", autopopulate);

module.exports = mongoose.model("Store", storeSchema);
